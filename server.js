// server.js (ESM)

// ======== 1. CONFIGURATION (ÿπÿØŸëŸÑ ŸáŸÜÿß ŸÅŸÇÿ∑ ÿ≠ÿ≥ÿ® ÿ≠ÿßÿ¨ÿ™ŸÉ) ========
import express from "express";
import axios from "axios";
import { XMLParser } from "fast-xml-parser";
import puppeteer from "puppeteer";
import fs from "fs";

const CONFIG = {
  // ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿßŸÑÿπÿßŸÖ ÿßŸÑÿ∞Ÿä ÿ≥Ÿäÿπÿ∑ŸäŸÉ ÿ•ŸäÿßŸá Railway (ÿ≥ŸÜÿ∂ŸäŸÅŸá ŸÑÿßÿ≠ŸÇŸãÿß)
  publicBaseUrl: process.env.PUBLIC_BASE_URL,
  // ÿßŸÑÿ®Ÿàÿ±ÿ™ ÿßŸÑÿ∞Ÿä ÿ≥ŸäÿπŸÖŸÑ ÿπŸÑŸäŸá ÿßŸÑÿÆÿßÿØŸÖ (Railway Ÿäÿ≠ÿØÿØŸá ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß)
  port: process.env.PORT || 3000,
  // ŸÖÿπÿ±ŸÅÿßÿ™ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ±ŸäÿØ ŸÖÿ™ÿßÿ®ÿπÿ™Ÿáÿß
  channels: [
    "UCneq-pXhApziFpje2tIfofw", // ŸÖÿ´ÿßŸÑ: ŸÇŸÜÿßÿ© ÿπÿ®ÿØÿßŸÑŸÑŸá
    "UC7IRWr5Is8vYuIyq3wUH5xA"  // ŸäŸÖŸÉŸÜŸÉ ÿ•ÿ∂ÿßŸÅÿ© ŸÇŸÜŸàÿßÿ™ ÿ£ÿÆÿ±Ÿâ ŸáŸÜÿß
  ],
  // ŸÜÿµ ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿßŸÑÿ∞Ÿä ÿ≥Ÿäÿ™ŸÖ ŸÜÿ¥ÿ±Ÿá
  commentText: `**ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ ÿ£ÿÆŸàŸä ÿπÿ®ÿØÿßŸÑŸÑŸá,üñêüèº
ÿßÿ™ŸÖŸÜŸâ ÿßŸÜŸÉ ÿ™ŸÇÿØÿ± ÿ¨ŸáŸàÿØŸä ÿ®ŸÉÿ™ÿßÿ®ÿ© Ÿáÿßÿ∞ÿß ÿßŸÑÿ™ÿπŸÑŸäŸÇ,
ÿ≠ÿßŸàŸÑÿ™ ÿßÿ¨ŸÖÿπŸÑŸÉ ŸÉŸÑ ÿßŸÑÿßŸÑÿπÿßÿ® ÿßŸÑŸä ÿ™ŸÉŸàŸÜ ŸÇÿ±Ÿäÿ®Ÿá ŸÑŸÇŸÑÿ®ŸÉ ŸàŸÇŸÑÿ®ŸÜÿß Ÿàÿ™ŸÉŸàŸÜ ÿ¥ÿ®ŸäŸáŸá ÿ®ŸÄ
(Little Nightmare Ÿà Planet of Lana)

ÿ¥ŸàŸÅ ŸáÿßŸä ÿßŸÑÿπÿ®ÿ™ŸäŸÜ ÿßŸÇÿ±ÿ® ÿ´ŸÜÿ™ŸäŸÜ ŸÅŸäŸáŸÖ
(Beyond The Darkness Ÿà One Last Breath)

ŸàŸÉŸÖŸÑ ÿ¥ŸàŸÅ ÿ®ÿßŸÇŸä ÿßŸÑÿßŸÑÿπÿßÿ®ÿå ÿ£ÿ™ŸÖŸÜŸâ ÿ™ÿ¨ÿ±ÿ®ŸáŸÖ:
Airhead ‚Äì Seen ‚Äì Unravel ‚Äì Arise ‚Äì Silt ‚Äì Somerville ‚Äì Planet Alpha ‚Äì Neva ‚Äì The Strange City ‚Äì Gloomy Eyes ‚Äì Bionic Bay ‚Äì White Shadows ‚Äì FAR: Lone Sails ‚Äì In His Time ‚Äì SELINI(2026) ‚Äì MOONY:Black_Lotus ‚Äì NODE: The Last Favor of the Antarii ‚Äì Orphans ‚Äì Once Upon A Puppet ‚Äì Double Shoulders ‚Äì Beyond The Darkness ‚Äì BREAKER: INITIATING ‚Äì Gift ‚Äì Emil ‚Äì My Shadow

+ ŸÅŸä ÿ¨ÿ≤ÿ° ÿ¨ÿØŸäÿØ ŸÖŸÜ Planet of Lana ÿ®ŸäŸÜÿ≤ŸÑ 2026 ŸÑÿß ÿ™ŸÜÿ≥Ÿâ ÿ™ŸÜÿ≤ŸÑ ÿπŸÜŸáÿß üòäüëç

ŸáÿßŸÑŸÜŸàÿπ ŸÖŸÜ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑŸÑŸä ÿ™ŸÜÿ≤ŸÑŸá ŸÖŸÖÿ™ÿπ ÿ¨ÿØŸãÿßÿå
ŸÑŸà ÿ≥ŸÖÿ≠ÿ™Ÿàÿß ÿ≠ÿ∑Ÿàÿß ŸÑÿßŸäŸÉ ÿπÿ¥ÿßŸÜ ŸäŸàÿµŸÑŸá ŸàŸäÿ¥ŸàŸÅŸá üëç**`,
  // ŸÉŸÑŸÖÿ© ÿ≥ÿ± ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ•ÿ¥ÿπÿßÿ± ŸÇÿßÿØŸÖ ŸÖŸÜ ŸäŸàÿ™ŸäŸàÿ® (ÿ≥ŸÜÿ∂ÿ®ÿ∑Ÿáÿß ŸÑÿßÿ≠ŸÇŸãÿß)
  verifyToken: process.env.VERIFY_TOKEN || "your-strong-secret-token",
  // ÿ•ÿπÿØÿßÿØÿßÿ™ Puppeteer (ÿßŸÑÿ®Ÿàÿ™)
  puppeteer: {
    headless: process.env.HEADLESS !== "false", // true ÿπŸÑŸâ ÿßŸÑÿÆÿßÿØŸÖÿå false ŸÖÿ≠ŸÑŸäŸãÿß ŸÑŸÑÿ™ÿ≥ÿ¨ŸäŸÑ
    userDataDir: "./user_data", // ŸÖÿ¨ŸÑÿØ ŸÑÿ≠ŸÅÿ∏ ÿ¨ŸÑÿ≥ÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage",
      "--disable-gpu",
      "--single-process",
      "--no-zygote"
    ]
  }
};
// =================================================================

// ======== 2. APPLICATION STATE (ŸÑÿ≠ŸÅÿ∏ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ) ========
const STATE_FILE = "./app_state.json";
let state = { lastVideoByChannel: {}, subscribedAt: 0 };

function loadState() {
  if (fs.existsSync(STATE_FILE)) {
    try {
      const data = fs.readFileSync(STATE_FILE, "utf8");
      state = JSON.parse(data);
      console.log("‚úÖ State loaded successfully.");
    } catch (e) {
      console.warn("‚ö†Ô∏è Could not load state file. Starting fresh.");
    }
  }
}

function saveState() {
  try {
    fs.writeFileSync(STATE_FILE, JSON.stringify(state, null, 2));
  } catch (e) {
    console.error("‚ùå Could not save state:", e.message);
  }
}

// ======== 3. CORE LOGIC (ÿßŸÑŸÖŸÜÿ∑ŸÇ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä) ========
const app = express();
let browser;

// ÿØÿßŸÑÿ© ŸÑÿ∂ŸÖÿßŸÜ Ÿàÿ¨ŸàÿØ ŸÖÿ™ÿµŸÅÿ≠ ÿ¨ÿßŸáÿ≤
async function getBrowser() {
  if (browser && browser.isConnected()) return browser;
  console.log("üöÄ Launching new Puppeteer browser instance...");
  browser = await puppeteer.launch({
    headless: CONFIG.puppeteer.headless,
    userDataDir: CONFIG.puppeteer.userDataDir,
    args: CONFIG.puppeteer.args
  });
  browser.on('disconnected', () => {
    console.log('Browser disconnected. It will be relaunched on next use.');
    browser = null;
  });
  console.log(`‚úÖ Puppeteer launched (Headless: ${CONFIG.puppeteer.headless})`);
  return browser;
}

// ÿØÿßŸÑÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿπŸÑŸâ ÿßŸÑŸÅŸäÿØŸäŸà (ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ© ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÇŸàÿ©)
async function commentOnVideo(videoUrl) {
  console.log(`‚ñ∂Ô∏è Starting comment process for: ${videoUrl}`);
  const b = await getBrowser();
  const page = await b.newPage();
  await page.setViewport({ width: 1366, height: 768 }); // ÿ≤ŸäÿßÿØÿ© ÿ≠ÿ¨ŸÖ ÿßŸÑÿ¥ÿßÿ¥ÿ© ŸÇŸÑŸäŸÑÿßŸã
  await page.setRequestInterception(true);
  page.on('request', (req) => (['image', 'font', 'media', 'stylesheet'].includes(req.resourceType()) ? req.abort() : req.continue()));

  try {
    await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 60000 });

    // ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ŸÜÿßŸÅÿ∞ÿ© ÿßŸÑŸÖŸàÿßŸÅŸÇÿ© ÿπŸÑŸâ ŸÖŸÑŸÅÿßÿ™ ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿßÿ±ÿ™ÿ®ÿßÿ∑
    try {
      const consentButton = await page.waitForSelector('button[aria-label*="Accept"], button[aria-label*="Alle akzeptieren"]', { timeout: 7000 });
      if (consentButton) {
        console.log("Cookie consent button found. Clicking...");
        await consentButton.click();
        await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 15000 });
        console.log("Cookie consent accepted.");
      }
    } catch (e) {
      console.log("Cookie consent pop-up not found or timed out, continuing...");
    }
    

    // ÿßŸÑÿ™ŸÖÿ±Ÿäÿ± ÿ•ŸÑŸâ ŸÇÿ≥ŸÖ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸàÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ÿ≠ÿ™Ÿâ ŸäŸÉŸàŸÜ ŸÖÿ±ÿ¶ŸäŸãÿß
    await page.evaluate(() => {
      const commentsElement = document.querySelector('#comments');
      if (commentsElement) {
        commentsElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    });
    await page.waitForSelector('#comments', { visible: true, timeout: 20000 });

    // --- ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ¨ÿØŸäÿØÿ© ŸÑŸÅÿ™ÿ≠ ÿµŸÜÿØŸàŸÇ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ---
    console.log("Attempting to click comment placeholder...");
    await page.click('#comments'); // ŸÜŸÇÿ±ÿ© ÿ£ŸàŸÑŸäÿ© ÿπŸÑŸâ ŸÇÿ≥ŸÖ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ŸÑÿ™ŸÅÿπŸäŸÑŸá
    await new Promise(resolve => setTimeout(resolve, 1000)); // ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ÿ≥Ÿäÿ∑
    
    const placeholderSelector = '#placeholder-area';
    await page.waitForSelector(placeholderSelector, { timeout: 15000 });
    await page.click(placeholderSelector);
    console.log("Comment placeholder clicked.");
    // ---------------------------------------------

    // --- ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ¨ÿØŸäÿØÿ© ŸÑŸÑŸÉÿ™ÿßÿ®ÿ© ---
    console.log("Waiting for comment editor to appear...");
    const editorSelector = '#contenteditable-root.yt-formatted-string';
    await page.waitForSelector(editorSelector, { visible: true, timeout: 20000 });
    
    // ÿ∑ÿ±ŸäŸÇÿ© ŸÉÿ™ÿßÿ®ÿ© ÿ£ŸÉÿ´ÿ± ŸÖŸàÿ´ŸàŸÇŸäÿ©
    await page.focus(editorSelector);
    await page.keyboard.type(CONFIG.commentText, { delay: 50 });
    console.log("Comment text typed.");
    // ---------------------------------

    // ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ≤ÿ± ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿ≠ÿ™Ÿâ Ÿäÿµÿ®ÿ≠ ŸÇÿßÿ®ŸÑÿßŸã ŸÑŸÑŸÜŸÇÿ±
    const submitButtonSelector = '#submit-button.ytd-commentbox';
    await page.waitForSelector(submitButtonSelector, { visible: true, timeout: 10000 });
    
    // ÿßŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿ≤ÿ± ŸÑŸäÿ≥ ŸÖÿπÿ∑ŸÑÿßŸã
    await page.waitForFunction(
      (selector) => !document.querySelector(selector).hasAttribute('disabled'),
      { timeout: 10000 },
      submitButtonSelector
    );
    console.log("Submit button is enabled. Clicking...");
    await page.click(submitButtonSelector);

    console.log(`‚úÖ Comment posted successfully on: ${videoUrl}`);
  } catch (error) {
    console.error(`‚ùå Failed to comment on ${videoUrl}:`, error.message);
    // ŸÑÿ£ÿ∫ÿ±ÿßÿ∂ ÿßŸÑÿ™ÿ¥ÿÆŸäÿµÿå ÿ≥ŸÜŸÇŸàŸÖ ÿ®ÿ≠ŸÅÿ∏ ŸÑŸÇÿ∑ÿ© ÿ¥ÿßÿ¥ÿ© ÿπŸÜÿØ ÿ≠ÿØŸàÿ´ ÿÆÿ∑ÿ£
    const errorScreenshotPath = `./error_screenshot_${Date.now()}.png`;
    await page.screenshot({ path: errorScreenshotPath, fullPage: true });
    console.log(`üì∏ Screenshot saved to ${errorScreenshotPath}`);
  } finally {
    await page.close();
  }
}


// ÿØÿßŸÑÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÅŸä ÿßŸÑŸÇŸÜŸàÿßÿ™
async function subscribeAll() {
  if (!CONFIG.publicBaseUrl) {
    console.log("‚ÑπÔ∏è PUBLIC_BASE_URL is not set. Skipping subscriptions (local mode).");
    return;
  }
  console.log("üîÑ Starting subscription process for all channels...");
  for (const channelId of CONFIG.channels) {
    const topicUrl = `https://www.youtube.com/xml/feeds/videos.xml?channel_id=${channelId}`;
    const callbackUrl = `${CONFIG.publicBaseUrl}/websub/callback`;
    
    try {
      await axios.post("https://pubsubhubbub.appspot.com/subscribe", new URLSearchParams({
        "hub.mode": "subscribe",
        "hub.topic": topicUrl,
        "hub.callback": callbackUrl,
        "hub.verify": "async",
        "hub.verify_token": CONFIG.verifyToken,
        "hub.lease_seconds": 864000 // 10 ÿ£ŸäÿßŸÖ
      }).toString(), { headers: { "Content-Type": "application/x-www-form-urlencoded" } });
      console.log(`‚úîÔ∏è Subscription request sent for channel: ${channelId}`);
    } catch (error) {
      console.error(`‚ùå Subscription failed for ${channelId}:`, error.response?.data || error.message);
    }
  }
  state.subscribedAt = Date.now();
  saveState();
}

// ======== 4. SERVER ROUTES (ŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿÆÿßÿØŸÖ) ========
app.use(express.text({ type: 'application/atom+xml' }));

// ŸÖÿ≥ÿßÿ± ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿµÿ≠ÿ©
app.get('/health', (_req, res) => res.json({ status: 'ok', state }));
// ŸÖÿ≥ÿßÿ± ÿ¨ÿØŸäÿØ ŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠ ŸäÿØŸàŸäŸãÿß ŸÑÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
app.get('/launch-browser-for-login', async (_req, res) => {
  if (CONFIG.puppeteer.headless) {
    return res.status(400).send('This endpoint is only for local login (when HEADLESS=false).');
  }
  try {
    console.log("‚ñ∂Ô∏è Launching browser for login...");
    await getBrowser();
    res.send('‚úÖ Browser launched! Please go to the new browser window, log in to YouTube, then close it. After that, you can stop the server (Ctrl+C).');
  } catch (e) {
    console.error("‚ùå Failed to launch browser:", e.message);
    res.status(500).send('Failed to launch browser. Check the terminal for errors.');
  }
});

// ŸÖÿ≥ÿßÿ± ÿ•ÿπÿßÿØÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸäÿØŸàŸä
app.post('/resub', async (_req, res) => {
  await subscribeAll();
  res.status(200).send('Subscription process initiated.');
});

// ŸÖÿ≥ÿßÿ± ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ™ÿπŸÑŸäŸÇ ÿßŸÑŸäÿØŸàŸä
app.post('/comment', express.json(), async (req, res) => {
  const { videoId } = req.body;
  if (!videoId) return res.status(400).json({ error: 'videoId is required' });
  
  commentOnVideo(`https://www.youtube.com/watch?v=${videoId}`)
    .then(() => res.status(200).json({ message: 'Comment process started.' }))
    .catch(err => res.status(500).json({ error: err.message }));
});

// ŸÖÿ≥ÿßÿ± ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ŸäŸàÿ™ŸäŸàÿ®
const websubRouter = express.Router();
websubRouter.get('/', (req, res) => {
  if (req.query['hub.verify_token'] === CONFIG.verifyToken) {
    res.send(req.query['hub.challenge']);
    console.log("‚úÖ WebSub verification successful!");
  } else {
    res.status(401).send('Invalid token');
    console.warn("‚ö†Ô∏è WebSub verification failed: Invalid token.");
  }
});

websubRouter.post('/', async (req, res) => {
  res.status(204).end(); // ÿ±ÿØ ÿ≥ÿ±Ÿäÿπ ŸÑŸäŸàÿ™ŸäŸàÿ® ŸÑÿ™ÿ£ŸÉŸäÿØ ÿßŸÑÿßÿ≥ÿ™ŸÑÿßŸÖ

  const feed = new XMLParser().parse(req.body);
  const entry = feed?.feed?.entry;
  if (!entry) return;

  const videoId = entry['yt:videoId'];
  const channelId = entry['yt:channelId'];
  const videoTitle = entry.title;

  if (state.lastVideoByChannel[channelId] === videoId) {
    console.log(`- Duplicate notification for video: ${videoId}`);
    return;
  }

  console.log(`üì∫ New video detected: "${videoTitle}" from channel ${channelId}`);
  state.lastVideoByChannel[channelId] = videoId;
  saveState();

  // ÿ™ÿ£ÿÆŸäÿ± ÿ®ÿ≥Ÿäÿ∑ ŸÑÿ∂ŸÖÿßŸÜ ÿ£ŸÜ ÿßŸÑŸÅŸäÿØŸäŸà ŸÖÿ™ÿßÿ≠ ŸÑŸÑÿ™ÿπŸÑŸäŸÇ
  setTimeout(() => {
    commentOnVideo(`https://www.youtube.com/watch?v=${videoId}`);
  }, 30000); // 30 ÿ´ÿßŸÜŸäÿ©
});

app.use('/websub/callback', websubRouter);

// ======== 5. STARTUP & SHUTDOWN (ÿ®ÿØÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ŸàÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ) ========
app.listen(CONFIG.port, () => {
  console.log(`üåç Server listening on port ${CONFIG.port}`);
  loadState();
  // ŸÑÿß ÿ™ŸÇŸÖ ÿ®ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿπŸÜÿØ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸÖÿ≠ŸÑŸäÿå ŸÅŸÇÿ∑ ÿπŸÜÿØ ÿßŸÑŸÜÿ¥ÿ±
  if (process.env.PUBLIC_BASE_URL) {
    subscribeAll();
    // ÿ•ÿπÿßÿØÿ© ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ŸÉŸÑ 9 ÿ£ŸäÿßŸÖ
    setInterval(subscribeAll, 9 * 24 * 60 * 60 * 1000);
  }
});

async function gracefulShutdown() {
  console.log("üõë Shutting down gracefully...");
  saveState();
  if (browser) await browser.close();
  process.exit(0);
}
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);